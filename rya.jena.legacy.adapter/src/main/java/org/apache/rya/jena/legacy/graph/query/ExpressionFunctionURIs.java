/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.rya.jena.legacy.graph.query;

/**
 * ExpressionFunctionURIs: constants expressing the URIs for functions that
 * may be recognized or generated by expression constructors and analyzers.
 */
public interface ExpressionFunctionURIs {
    public static final String PREFIX = "urn:x-jena:expr:";

    /**
     * Operator used to AND conditions together. The Query.addConstraint()
     * method explodes ANDed expressions into their components and keeps
     * them separately.
     */
    public static final String AND = PREFIX + "AND";

    /**
     * Function identifier for "L endsWith string literal R", generated by Rewrite.
     */
    public static final String J_EndsWith = PREFIX + "J_endsWith";

    /**
     * Function identifier for "L startsWith string literal R", generated by Rewrite.
     */
    public static final String J_startsWith = PREFIX + "J_startsWith";

    public static final String J_startsWithInsensitive = PREFIX + "J_startsWithInsensitive";

    public static final String J_endsWithInsensitive = PREFIX + "J_endsWithInsensitive";

    /**
     * Function identifier for "L contains string literal R", generated by Rewrite.
     */
    public static final String J_contains = PREFIX + "J_contains";

    public static final String J_containsInsensitive = PREFIX + "J_containsInsensitive";

    /**
     * Function identifier for RDQL-style string-match operation. This is recognized
     * by Query and rewritten by Rewrite to the J_* methods. The left operand
     * may be any expression, but the right operand must be a PatternLiteral.
     */
    public static final String Q_StringMatch = PREFIX + "Q_StringMatch";
}